/** Performs a shallow update of an object using a partial object of the same shape. A new object is returned. */
export declare function update<Obj extends {}, K extends keyof Obj>(host: Obj, spec: Pick<Obj, K>): Obj;
/** Marker used to delete a key */
export declare const DELETE: undefined;
export declare type ObjectLiteral = object & {
    reduceRight?: 'nope';
};
export interface AtUpdater<R, O> {
    __T: [R, O];
    /**
     * Selects this Object key for update or further at() chaining
     */
    at<K extends keyof O>(this: AtUpdater<R, ObjectLiteral>, key: K): Updater<R, O[K]>;
    /**
     * Selects an Array index for update or further at() chaining
     */
    at<A>(this: AtUpdater<R, A[]>, index: number): Updater<R, A | undefined>;
}
export interface BoundAtUpdater<R, O> {
    __T: [R, O];
    /**
     * Selects this Object key for update or further at() chaining
     */
    at<K extends keyof O>(this: BoundAtUpdater<R, ObjectLiteral>, key: K): BoundUpdater<R, O[K]>;
    /**
     * Selects an Array index for update or further at() chaining
     */
    at<A>(this: BoundAtUpdater<R, A[]>, index: number): BoundUpdater<R, A | undefined>;
}
export interface Updater<R, O> extends AtUpdater<R, O> {
    __T: [R, O];
    /**
     * Sets the value at the currently selected path.
     */
    set(value: O): (target: R) => R;
    /**
     * Modifies the value at the specified path. The current value is passed.
     */
    modify(modifier: (value: O) => O): (target: R) => R;
    /**
     * Makes the previous nullable chain level 'safe' by using a default value
     */
    withDefault<B, C extends B>(this: Updater<R, B | undefined>, defaultValue: C): Updater<R, B>;
    /**
     * Aborts the whole update operation if the previous chain level is null or undefined.
     */
    abortIfUndef<B>(this: Updater<R, B | undefined>): Updater<R, B>;
}
export interface BoundUpdater<R, O> extends BoundAtUpdater<R, O> {
    __T: [R, O];
    /**
     * Sets the value at the currently selected path.
     */
    set(value: O): R;
    /**
     * Modifies the value at the specified path. The current value is passed.
     */
    modify(modifier: (value: O) => O): R;
    /**
     * Makes the previous nullable chain level 'safe' by using a default value
     */
    withDefault<B, C extends B>(this: BoundUpdater<R, B | undefined>, defaultValue: C): BoundUpdater<R, B>;
    /**
     * Aborts the whole update operation if the previous chain level is null or undefined.
     */
    abortIfUndef<B>(this: BoundUpdater<R, B | undefined>): BoundUpdater<R, B>;
}
export declare function deepUpdate<O extends object>(target: O): BoundAtUpdater<O, O>;
export declare function deepUpdate<O extends object>(): AtUpdater<O, O>;

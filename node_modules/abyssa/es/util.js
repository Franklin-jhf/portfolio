var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

export function noop() {}

export function arrayToObject(array) {
  return array.reduce(function (obj, item) {
    obj[item] = 1;
    return obj;
  }, {});
}

export function objectToArray(obj) {
  var array = [];
  for (var key in obj) {
    array.push(obj[key]);
  }return array;
}

export function copyObject(obj) {
  var copy = {};
  for (var key in obj) {
    copy[key] = obj[key];
  }return copy;
}

export function mergeObjects(to, from) {
  for (var key in from) {
    to[key] = from[key];
  }return to;
}

export function mapValues(obj, fn) {
  var result = {};
  for (var key in obj) {
    result[key] = fn(obj[key]);
  }return result;
}

/*
* Return the set of all the keys that changed (either added, removed or modified).
*/
export function objectDiff(obj1, obj2) {
  var update = {};
  var enter = {};
  var exit = {};
  var all = {};

  obj1 = obj1 || {};

  for (var name in obj1) {
    if (!(name in obj2)) exit[name] = all[name] = true;else if (obj1[name] != obj2[name]) update[name] = all[name] = true;
  }

  for (var _name in obj2) {
    if (!(_name in obj1)) enter[_name] = all[_name] = true;
  }

  return { all: all, update: update, enter: enter, exit: exit };
}

export function makeMessage() {
  var message = arguments[0];
  var tokens = Array.prototype.slice.call(arguments, 1);

  for (var i = 0, l = tokens.length; i < l; i++) {
    message = message.replace('{' + i + '}', tokens[i]);
  }return message;
}

export function parsePaths(path) {
  return path.split('/').filter(function (str) {
    return str.length;
  }).map(function (str) {
    return decodeURIComponent(str);
  });
}

export function parseQueryParams(query) {
  return query ? query.split('&').reduce(function (res, paramValue) {
    var _paramValue$split = paramValue.split('='),
        _paramValue$split2 = _slicedToArray(_paramValue$split, 2),
        param = _paramValue$split2[0],
        value = _paramValue$split2[1];

    res[param] = decodeURIComponent(value);
    return res;
  }, {}) : {};
}

var LEADING_SLASHES = /^\/+/;
var TRAILING_SLASHES = /^([^?]*?)\/+$/;
var TRAILING_SLASHES_BEFORE_QUERY = /\/+\?/;
export function normalizePathQuery(pathQuery) {
  return '/' + pathQuery.replace(LEADING_SLASHES, '').replace(TRAILING_SLASHES, '$1').replace(TRAILING_SLASHES_BEFORE_QUERY, '?');
}

export function stateShorthand(uri, options, children) {
  return mergeObjects({ uri: uri, children: children || {} }, options);
}
import { Wrapper } from '../lift';
export { Wrapper } from '../lift';
export interface Lift {
    /** Wraps a Number to provide a richer API. Unwrap with .value() **/
    (obj: number): NumberOps;
    /** Wraps a String to provide a richer API. Unwrap with .value() **/
    (obj: string): StringOps;
    /** Wraps a boolean to provide a richer API. Unwrap with .value() **/
    (obj: boolean): BoolOps;
    /** Wraps an Array to provide a richer API. Unwrap with .value() **/
    <T>(obj: T[]): ArrayOps<T>;
    /** Wraps a plain Object to provide a richer API. Unwrap with .value() **/
    <T extends {}>(obj: T): ObjectOps<T>;
}
declare const lift: Lift;
export default lift;
export declare function getValue<A>(input: A | Wrapper<A>): A;
export declare class ArrayOps<A> implements Wrapper<A[]> {
    constructor(array: A[]);
    _isLiftWrapper: boolean;
    private _value;
    value(): A[];
}
export declare class ObjectOps<A> implements Wrapper<A> {
    constructor(object: A);
    _isLiftWrapper: boolean;
    private _value;
    value(): A;
}
export declare class NumberOps implements Wrapper<number> {
    constructor(num: number);
    _isLiftWrapper: boolean;
    private _value;
    value(): number;
}
export declare class StringOps implements Wrapper<string> {
    constructor(str: string);
    _isLiftWrapper: boolean;
    private _value;
    value(): string;
}
export declare class BoolOps implements Wrapper<boolean> {
    constructor(value: boolean);
    _isLiftWrapper: boolean;
    private _value;
    value(): boolean;
}

import { Wrapper, ArrayOpsConstructor, ArrayOps as IArrayOps, ObjectOpsConstructor, ObjectOps as IObjectOps, NumberOpsConstructor, NumberOps as INumberOps, StringOpsConstructor, StringOps as IStringOps, BoolOpsConstructor, BoolOps as IBoolOps } from '../wrapper';
export { Wrapper } from '../wrapper';
export interface Lift {
    /** Wraps a Number to provide a richer API. Unwrap with .value() **/
    (obj: number): NumberOps;
    /** Wraps a String to provide a richer API. Unwrap with .value() **/
    (obj: string): StringOps;
    /** Wraps a boolean to provide a richer API. Unwrap with .value() **/
    (obj: boolean): BoolOps;
    /** Wraps an Array to provide a richer API. Unwrap with .value() **/
    <T>(obj: T[]): ArrayOps<T>;
    /** Wraps a plain Object to provide a richer API. Unwrap with .value() **/
    <T extends {}>(obj: T): ObjectOps<T>;
}
declare const lift: Lift;
export default lift;
export declare function getValue<A>(input: A | Wrapper<A>): A;
export declare type ArrayOps<A> = IArrayOps<A>;
export declare const ArrayOps: ArrayOpsConstructor;
export declare type ObjectOps<A> = IObjectOps<A>;
export declare const ObjectOps: ObjectOpsConstructor;
export declare type NumberOps = INumberOps;
export declare const NumberOps: NumberOpsConstructor;
export declare type StringOps = IStringOps;
export declare const StringOps: StringOpsConstructor;
export declare type BoolOps = IBoolOps;
export declare const BoolOps: BoolOpsConstructor;

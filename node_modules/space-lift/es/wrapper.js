var lift = function (obj) {
    if (obj instanceof Array)
        return new ArrayOps(obj);
    if (typeof obj === 'string')
        return new StringOps(obj);
    if (typeof obj === 'number')
        return new NumberOps(obj);
    if (obj === true || obj === false)
        return new BoolOps(obj);
    return new ObjectOps(obj);
};
export default lift;
export function getValue(input) {
    return input && input['_isLiftWrapper']
        ? input.value()
        : input;
}
//--------------------------------------
//  Array
//--------------------------------------
var ArrayOps = (function () {
    function ArrayOps(array) {
        this._isLiftWrapper = true;
        this._value = array;
    }
    ArrayOps.prototype.value = function () { return this._value; };
    return ArrayOps;
}());
export { ArrayOps };
//--------------------------------------
//  Object
//--------------------------------------
var ObjectOps = (function () {
    function ObjectOps(object) {
        this._isLiftWrapper = true;
        this._value = object;
    }
    ObjectOps.prototype.value = function () { return this._value; };
    return ObjectOps;
}());
export { ObjectOps };
//--------------------------------------
//  Number
//--------------------------------------
var NumberOps = (function () {
    function NumberOps(num) {
        this._isLiftWrapper = true;
        this._value = num;
    }
    NumberOps.prototype.value = function () { return this._value; };
    return NumberOps;
}());
export { NumberOps };
//--------------------------------------
//  String
//--------------------------------------
var StringOps = (function () {
    function StringOps(str) {
        this._isLiftWrapper = true;
        this._value = str;
    }
    StringOps.prototype.value = function () { return this._value; };
    return StringOps;
}());
export { StringOps };
//--------------------------------------
//  Boolean
//--------------------------------------
// Not that we expect to expand on the boolean capabilities... But for completeness sake.
var BoolOps = (function () {
    function BoolOps(value) {
        this._isLiftWrapper = true;
        this._value = value;
    }
    BoolOps.prototype.value = function () { return this._value; };
    return BoolOps;
}());
export { BoolOps };
